<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	

	<flow name="slash-list" doc:id="32545b19-3ed8-4e50-bcc0-a5ab8b08116e" >
		<db:select doc:name="get list" doc:id="f11d03fe-86d2-49d8-a29d-64a43d5b765e" config-ref="Database_Config">
			<db:sql >select
count(orders.itemid) as count,
orders.itemname
from
orders
where
orders.userid = :userid
and orders.voteid =  (select max(id) from active)
group by orders.itemname</db:sql>
			<db:input-parameters ><![CDATA[#[{
'userid' : payload.slack.user_id,
'name' : payload.slack.user_name
}]]]></db:input-parameters>
		</db:select>
		<ee:transform doc:name="response list" doc:id="5e1c9ec7-893d-4e37-ab25-a390993a893f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/flatfile schemaPath="flatfiles/list.ffd" 
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	
</flow>
	<flow name="slash-listall" doc:id="3ff4be2e-a3da-49ca-84e9-855c434c1760" >
		<db:select doc:name="get list all" doc:id="eb3ba924-6ac3-41ce-91f1-da00ad832205" config-ref="Database_Config">
			<db:sql >select 
count(orders.itemid) as count,
orders.itemname ,
users.name
from 
orders,
users
where
orders.voteid = (select max(id) from active) 
and users.userid = orders.userid
group by orders.itemname,users.name</db:sql>
		</db:select>
		<ee:transform doc:name="Response list all" doc:id="6156cfbe-4acf-4126-b2d3-af6343d543da" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/flatfile schemaPath="flatfiles/list.ffd" 
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="slash-menu" doc:id="72c3e9cd-a134-4089-9538-783e6398c49b" >
		<db:select doc:name="Select menu" doc:id="5476cc1f-0fdb-4dd5-80aa-f289d80567b6" config-ref="Database_Config" target="menu">
			<db:sql >select 
restaurants.name,
menu.*
from
active,
restaurants,
menu
where 
restaurants.id = active.winner
and menu.restaurantid = restaurants.id
and active.id = (select max(id) from active)</db:sql>
		</db:select>
		<ee:transform doc:name="response menu" doc:id="24bb1e8e-833d-4b34-9ff0-24161d22e46f">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/flatfile encoding="UTF-8", schemaPath="flatfiles/menu.ffd" 
---
 vars.menu]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="ede8fbda-47b2-4650-aa35-9fd58b2f5f11" message="#[payload]"/>
	
</flow>
	<flow name="slash-restaurants" doc:id="78a946de-38c3-4c75-8190-0f505a221d0d" >
		<db:select doc:name="Select restaurants" doc:id="bb60d25f-ce48-4896-953d-7fe482a9d6d7" config-ref="Database_Config">
			<db:sql >select
*
from
restaurants</db:sql>
		</db:select>
		<ee:transform doc:name="response available restaurants" doc:id="5e467ccf-a881-4b48-840f-107d534f6db4" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/flatfile schemaPath = "flatfiles/restaurants.ffd"
---
 payload
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="slash-insertvote" doc:id="603f6c7a-a18a-4313-a513-cf3ce022b612" >
		<flow-ref doc:name="Flow Reference" doc:id="8fc11e0c-cfdf-40d2-bd4c-e96ec13ff489" name="global-checkUserExist"/>
		<db:select doc:name="Select Votes" doc:id="4c7c3595-0005-4bfb-b802-31f1444de837" config-ref="Database_Config" target="votecheck">
			<db:sql >select 
active.date as actdate,
active.active,
active.type,
(select
votes.date
from
votes
where votes.date = :date
and votes.user = :name
and votes.voteid = (select max(id) from active) ) as date,
(select
votes.user
from
votes
where 
votes.date = active.date
and votes.user = :name 
and votes.voteid = (select max(id) from active) ) as user
from
active
where
active.date = :date
and active.type = :type
ORDER BY active.id DESC LIMIT 1</db:sql>
			<db:input-parameters ><![CDATA[#[{
'userid' : payload.slack.user_id,
'name' : payload.slack.user_name,
'type' : 'vote',
'date' : now() as Date
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="56f9ca33-666c-4a95-b8b7-0deefe04d6dd" >
		<when expression="#[vars.votecheck[0].active != 'y']">
			<set-payload value="No vote in progress." doc:name="no active vote" doc:id="5cf579f0-7b37-47c6-bfda-26f7a59066e2" />
		</when>
		<when expression='#[payload.slack.text == "" ]'>
			<set-payload value="You forgot the send the number of the restaurant you want to vote for. Type /restaurants for a list of competing restaurants." doc:name="Empty vote" doc:id="ced93025-ff56-4e19-ad16-0e3780d1efc7" />
		</when>
			<when expression="#[vars.votecheck.user != null]">
				<db:update doc:name="Update" doc:id="2a3d3623-e71c-4147-9c55-7a677b6ff8af" config-ref="Database_Config">
					<db:sql >UPDATE votes 
SET
datetime = DATE_FORMAT(NOW(),'%Y%m%d%H%i%s'),
date =  DATE_FORMAT(NOW(),'%Y%m%d'),
vote = :vote
where user = :name
and date =  DATE_FORMAT(NOW(), '%Y%m%d')
and voteid =  (select max(id) from active)</db:sql>
					<db:input-parameters ><![CDATA[#[{
'userid' : payload.slack.user_id,
'name' : payload.slack.user_name,
'vote' : payload.slack.text
}]]]></db:input-parameters>
				</db:update>
				<set-payload value="Vote updated" doc:name="Set Payload" doc:id="dfd10f07-8669-42d4-8212-1180100870cf" />
			</when>
			<otherwise >
				<db:insert doc:name="Insert vote" doc:id="3e79b6b7-0fc2-4e87-a925-6256eb44ed65" config-ref="Database_Config">
			<db:sql>insert into votes
(date,datetime,user,vote,voteid,userid)
values(
 DATE_FORMAT(NOW(), '%Y%m%d'),
 DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'),
 :name,
 :vote,
  (select max(id) from active),
 :userid
 );</db:sql>
			<db:input-parameters><![CDATA[#[{
'userid' : payload.slack.user_id,
'name' : payload.slack.user_name,
'vote' : payload.slack.text
}]]]></db:input-parameters>
		</db:insert>
				<set-payload value="Vote noted" doc:name="Set Payload" doc:id="5f4e9e4c-b477-4822-8c69-71382f66ab23" />
			</otherwise>
		</choice>
	</flow>
	<flow name="slash-insertorder" doc:id="58252959-18a9-4834-9bb2-c3958d63ca60" >
		<flow-ref doc:name="Flow Reference" doc:id="4abaad9f-d722-4886-ac34-ef147710722a" name="global-checkUserExist" />
		<db:select doc:name="Select menu item" doc:id="c2b456b6-8994-41fc-b9e5-7d39d2d29edc" config-ref="Database_Config" target="selecteditem">
			<db:sql >select 
users.userid,
restaurants.id,
menu.itemid,
votes.voteid,
menu.item
from
votes,
restaurants,
menu,
users
where 
restaurants.id = votes.vote
and menu.restaurantid = restaurants.id
and votes.voteid = (select max(id) from active)
and votes.userid = users.userid
and users.userid= :userid
and menu.itemid = :itemid</db:sql>
			<db:input-parameters ><![CDATA[#[{
'userid' : payload.slack.user_id,
'name' : payload.slack.user_name,
'itemid' : payload.slack.text,
}]]]></db:input-parameters>
		</db:select>
		<db:insert doc:name="Insert order" doc:id="edfa4ff1-007c-47f4-906d-9c873568fc5c" config-ref="Database_Config" target="insertedorderresponse">
			<db:sql >insert into orders(userid,restaurantid,itemid,datetime,voteid,itemname)
select 
users.userid,
restaurants.id,
menu.itemid,
DATE_FORMAT(NOW(),'%Y%m%d%H%i%s'),
votes.voteid,
menu.item
from
votes,
restaurants,
menu,
users
where 
restaurants.id = votes.vote
and menu.restaurantid = restaurants.id
and votes.voteid = (select max(id) from active)
and votes.userid = users.userid
and users.userid= :userid
and menu.itemid = :itemid</db:sql>
			<db:input-parameters ><![CDATA[#[{
'userid' : payload.slack.user_id,
'name' : payload.slack.user_name,
'itemid' : payload.slack.text,
}]]]></db:input-parameters>
		</db:insert>
		<ee:transform doc:name="response order" doc:id="906e181a-3ed3-4e21-b36f-5683b1cf4d7f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output text/plain
---
'Order ' ++ vars.selecteditem[0].item ++ ' noted']]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	
	
</mule>
